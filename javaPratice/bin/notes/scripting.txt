:: Scripting can be done using two section of request: Pre-request Script and Tests
:: Levels: Scripting can be done on Collection, Folder or Request level using 2 secions mentioned above
:: Execution Order: Pre-request(Collection)>Pre-request(Folder)>Pre-request(Request)>Request>Response>Tests(Collection)>Tests(Folder)>Tests(Request)
:: console.log("")-- to print in postman console
:: require("btoa")-- to import a package, here imports 'btoa' package
:: var accessToken= pm.response.json().access_token;-- variable declaration

:: pm.globals-- this object provides all informations about global variables
:: typeOf()-- this method of javascript returns the data type of mentioned entity
   Ex- console.log(typeof(pm.globals))-- returns 'object'
:: pm.globals.set("globalVariableNAme","value")-- sets the value of mentioned global variable/ adds the variable if not present
   Ex-- pm.globals.set("url_http_requests","apple")
:: pm.globals.get("globalVariableNAme")-- gets the value of mentioned global variable
   Ex-- console.log(pm.globals.get("url_http_requests"))
:: pm.globals.has("globalVariableNAme")-- checks whether the mentioned global variable is present or not, returns true if present or false if absent
   Ex-- console.log(pm.globals.has("url_http_requests"))
:: pm.globals.toObject()-- returns the object which has all defined global variables with the key- value pair
   Ex-- console.log(pm.globals.toObject())
:: pm.globals.unset("globalVariableNAme")-- deletes the mentioned global variable
   Ex-- pm.globals.unset("url_http_requests")
:: pm.globals.clear()-- deletes all mentioned global variables
   Ex-- pm.globals.clear()

:: pm.environment-- this object provides all informations about environment variables
:: pm.environment.set("envVariableName","value")-- sets the value of mentioned environment variable/ adds the variable if not present
   Ex-- pm.environment.set("browser","chrome")
:: pm.environment.get("envVariableName")-- gets the value of mentioned environment variable
   Ex-- console.log(pm.environment.get("browser"))
:: pm.environment.name-- prints the name of current selected environment
   Ex-- console.log(pm.environment.name)
:: pm.environment.has("envVariableNAme")-- checks whether the mentioned environment variable is present or not, returns true if present or false if absent
   Ex-- console.log(pm.environment.has("browser"))
:: pm.environment.toObject()-- returns the object which has all defined environment variables with the key- value pair
   Ex-- console.log(pm.environment.toObject())
:: pm.environment.unset("envVariableName")-- deletes the mentioned environment variable
   Ex-- pm.environment.unset("browser")
:: pm.environment.clear()-- deletes all mentioned environment variables
   Ex-- pm.environment.clear()

:: pm.request-- this object provides all informations about request
:: pm.request.url-- this will provide the URL object of the request
   Ex-- console.log(pm.request.url)
   A URL object has furthur sub objects like protocol, path, query, etc...now anyone of them cam be accessed using . after url in above request
:: pm.request.body-- this will provide the body object of the request
   Ex-- console.log(pm.request.body)

:: pm.response-- this object provides all informations about response
:: pm.response.code-- this will provide the status code of the response
   Ex-- console.log(pm.response.code)
:: pm.response.status-- this will provide the status of the response in string format
   Ex-- console.log(pm.response.status)
:: pm.response.headers-- provides an object which contains all response headers in key value format
   Ex-- console.log(pm.response.headers)
:: pm.response.responseSize-- provides the size of the response
   Ex-- console.log(pm.response.responseSize)
:: pm.response.text()-- provides the response body in String format
   Ex-- console.log(pm.response.text())
:: pm.response.json()-- provides the response body in json format object in key value format
   Ex-- console.log(pm.response.json())

:: Postman Assertions- can be used to verify whether API is working fine or not..can be written in both sections, Pre-request Script and Tests
:: pm.test("Name of the test",function(){})-- to write test
   Ex1-- pm.test("Check status code", function(){
   pm.expect(pm.response.code).to.eq(200);
   });
   
   Ex2-- pm.test("Check status code", function(){
   pm.expect(pm.response.json().data).to.eq("Hello");
   });

   Ex2-- pm.test("Payment response has an id", function(){
    pm.expect(pm.response.text()).to.include("id")
})































