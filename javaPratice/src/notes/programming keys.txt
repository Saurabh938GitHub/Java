-- A Java constructor cannot be abstract, static, final, and synchronized. We can use access modifiers while declaring a constructor. It controls the object creation. In other words, we can have private, protected, public or default constructor in Java.
-- Java constructors can be overloaded.
-- Call to this() must be the first statement in a constructor.
-- super() is added in each class constructor automatically by compiler if there is no super() or this().
-- If you make any class constructor private, you cannot create the instance of that class from outside the class


-- The static method can not use non static data member or call non-static method directly.
-- this and super cannot be used in static context.
-- static block- used to initialize the static data member, is executed before the main method at the time of class loading

-- Instance Initializer block is used to initialize the instance data member. It run each time when object of the class is created.
-- The instance initializer block is invoked after the parent class constructor is invoked (i.e. after super() constructor call).
-- The instance initializer block comes in the order in which they appear.

-- Yes, final method is inherited but you cannot override it.
-- A final variable that is not initialized at the time of declaration is known as blank final variable. It can be initialized only in constructor.
-- A static final variable that is not initialized at the time of declaration is known as static blank final variable. It can be initialized only in static block.

-- main method can be overloaded. But JVM calls main() method which receives string array as arguments only.
-- main method cannot be overridden. Because, a static method cannot be overridden. 
-- A method is overridden, not the data members, so runtime polymorphism can't be achieved by data members.

-- A class cannot be private or protected except nested class.

-- If you are overriding any method, overridden method (i.e. declared in subclass) must not be more restrictive.

-- If the reference variable of Parent class refers to the object of Child class, it is known as upcasting.

-- Abstract class in Java cannot be instantiated. It can have constructors and static/final methods.
-- If you are extending an abstract class that has an abstract method, you must either provide the implementation of the method or make this class abstract.

-- Interface in Java cannot be instantiated. It can have default/private and static methods.
-- The Java compiler adds public and abstract keywords before the interface method. Moreover, it adds public, static and final keywords before data members.

-- A factory method is a method that returns the instance of the class.

-- If you import a package, sub-packages will not be imported.

-- The Object class is the parent class of all the classes in java by default. In other words, it is the topmost class of java. The Object class is beneficial if you want to refer any object whose type you don't know.

-- The automatic conversion of primitive data type into its corresponding wrapper class is known as autoboxing, for example, byte to Byte

-- String class is final so no one can override the methods of the String class

-- StringBuffer is synchronized i.e. thread safe. It means two threads can't call the methods of StringBuffer simultaneously.
-- StringBuilder is non-synchronized i.e. not thread safe. It means two threads can call the methods of StringBuilder simultaneously.
-- Default capacity of string buffer/ builder is 16 and if capacity increase then it increases by  (oldcapacity*2)+2

-- In short, all the wrapper classes and String class is immutable. We can also create immutable class by creating final class that have final data members with no setter methods.
-- If you want to represent any object as a string, toString() method comes into existence. The toString() method returns the String representation of the object.


-- It means we can't use try block alone. The try block must be followed by either catch or finally.
-- The "catch" block is used to handle the exception. It must be preceded by try block which means we can't use catch block alone. It can be followed by finally block later. 
-- You can use multiple catch block with a single try block. Each catch block must contain a different exception handler. At a time only one exception occurs and at a time only one catch block is executed. All catch blocks must be ordered from most specific to most general, i.e. catch for ArithmeticException must come before catch for Exception.
-- The "finally" block is used to execute the necessary code of the program. It is executed whether an exception is handled or not.
-- For each try block there can be zero or more catch blocks, but only one finally block.

-- throw keyword is used to throw an exception explicitly. Both unchecked and checked exceptions can be thrown. 
-- If we throw a checked exception using throw keyword, it is must to handle the exception using catch block or the method must declare it using throws declaration.


-- If the superclass method does not declare an exception, subclass overridden method cannot declare the checked exception but it can declare unchecked exception.
-- If the superclass method declares an exception, subclass overridden method can declare same, subclass exception or no exception but cannot declare parent exception.